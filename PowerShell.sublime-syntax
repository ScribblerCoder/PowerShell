%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: PowerShell
scope: source.powershell

file_extensions:
  - ps1
  - psm1
  - psd1

variables:
  dec_digits: (?:[\d_]*\d)
  dec_exponent: (?:[eE][-+]?{{dec_digits}})
  float_suffix: '(?i:[fdm])'
  integer_suffix: '(?i:ul?|lu?)'
  bytes_unit: (?i:[kmgtp]b)

contexts:

  main:
    - include: comments
    - include: redirection
    - include: commands
    - include: variable
    - include: interpolated-string-content
    - include: function
    - include: attribute
    - include: using-directive
    - include: type
    - include: hashtable
    - include: strings
    - include: script-block
    # - include: double-quoted-string-escapes
    - include: numeric-constant
    - match: (@)(\()
      captures:
        1: keyword.other.array.begin.powershell
        2: punctuation.section.group.begin.powershell
      push:
        - meta_scope: meta.group.array-expression.powershell
        - match: \)
          scope: punctuation.section.group.end.powershell
          pop: true
        - include: main
    - match: (\$)(\()
      # TODO: move to repo; make recursive.
      captures:
        1: keyword.other.variable.definition.powershell
        2: punctuation.section.group.begin.powershell
      push:
        - meta_scope: meta.group.complex.subexpression.powershell
        - match: \)
          scope: punctuation.section.group.end.powershell
          pop: true
        - include: main
    - match: \b[\w.-]+\.(?i:exe|com|cmd|bat)\b
      scope: variable.function.powershell
    - match: \b(?:(?i:begin|break|catch|continue|data|default|define|do|dynamicparam|else|elseif|end|exit|finally|for|foreach(?!-object)|from|if|in|inlinescript|parallel|param|process|return|switch|throw|trap|try|until|var|where(?!-object)|while)|%|\?)(?!\w)
      scope: keyword.control.powershell
    - match: \B--%\B
      scope: keyword.control.powershell
      push:
        - meta_content_scope: string.unquoted.powershell
        - match: (?=\n|$)
          pop: true
    - match: \b(?i:hidden|static)\b
      # This should only be relevant inside a class but will require a rework of how classes are matched. This is a temp fix.
      scope: storage.modifier.powershell
    - match: \b((?i:class)|%|\?)(?:\s)+([\w-]+)\b
      captures:
        1: storage.type.class.powershell
        2: meta.class.powershell entity.name.class.powershell
    # Operators...
    - match: \B(-)(?i:as)\b
      scope: keyword.operator.cast.powershell
      captures:
        1: punctuation.definition.keyword.powershell
    - match: \B(-)(?i:[ic]?(?:eq|ne|[gl][te]))\b
      scope: keyword.operator.comparison.powershell
      captures:
        1: punctuation.definition.keyword.powershell
    - match: \B(-)(?i:[ic]?(?:not)?(?:like|match|contains|in))\b
      scope: keyword.operator.logical.powershell
      captures:
        1: punctuation.definition.keyword.powershell
    - match: \B(-)(?i:join|split|replace)\b
      scope: keyword.operator.string.powershell
      captures:
        1: punctuation.definition.keyword.powershell
    - match: \B(-)(?i:is(?:not)?)\b
      scope: keyword.operator.logical.powershell
      captures:
        1: punctuation.definition.keyword.powershell
    - match: \B(-)(?i:and|or|not|xor)\b|!
      scope: keyword.operator.logical.powershell
      captures:
        1: punctuation.definition.keyword.powershell
    - match: \B(-)(?i:band|bor|bnot|bxor|sh[lr])\b
      scope: keyword.operator.bitwise.powershell
      captures:
        1: punctuation.definition.keyword.powershell
    - match: \B(-)(?i:f)\b
      scope: keyword.operator.string-format.powershell
      captures:
        1: punctuation.definition.keyword.powershell
    # Flags/Options/Parameters
    - match: \B([-/])[\p{L}](?:[\w-]*\w)?
      scope: variable.parameter.option.powershell
      captures:
        1: punctuation.definition.parameter.powershell
    # operators continue...
    - match: '[+/*%-]?='
      scope: keyword.operator.assignment.powershell
    - match: (?:\+\+|--)(?![ \t]*\d)
      scope: keyword.operator.assignment.powershell
    - match: '[+-](?=\.?\d)'
      scope: keyword.operator.unary.powershell
    - match: '[+/*%-]'
      scope: keyword.operator.arithmetic.powershell
    - match: \|\||&&
      scope: keyword.operator.logical.powershell
    - match: \|
      scope: keyword.operator.logical.pipe.powershell
    - match: ;
      scope: punctuation.terminator.statement.powershell
    - match: \`
      scope: punctuation.separator.continuation.line.powershell
    - match: ','
      scope: punctuation.separator.sequence.powershell
    - match: '&|\B\.(?= )'
      scope: keyword.operator.other.powershell
    - match: \.\.(?=\-?\d|\(|\$)
      # This is very imprecise. Is there a syntax for 'must come after...'?
      scope: keyword.operator.range.powershell

  comments:
    - include: comment-block
    - include: comment-line

  redirection:
    # https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection
    - match: ([2-6*])(>&)(1)
      captures:
        1: constant.numeric.decimal.file-descriptor.powershell
        2: keyword.operator.redirection.powershell
        3: constant.numeric.decimal.file-descriptor.powershell
    - match: ([1-6*])(>>?)
      captures:
        1: constant.numeric.decimal.file-descriptor.powershell
        2: keyword.operator.redirection.powershell
    - match: '>>?'
      scope: keyword.operator.redirection.powershell
    # - match: <+
    #   scope: invalid.illegal.powershell

  requires-directive:
    - match: (?<=#)(?i:requires)\s
      scope: keyword.control.requires.powershell
      push:
        - meta_scope: meta.requires.powershell
        - match: $
          pop: true
        - include: hashtable
        - match: \-(?i:Modules|PSSnapin|RunAsAdministrator|ShellId|Version)
          scope: keyword.other.powershell
        - match: '-'
          # Intentional no-scope match to skip leading `-`s below
        - match: \b\p{L}+|\d+(?:\.\d+)*
          scope: variable.parameter.powershell

  using-directive:
    - match: \b(?i:(using))\s+(?i:(namespace|module))\s+(?i:((?:\w+(?:\.)?)+))
      captures:
        1: keyword.control.using.powershell
        2: keyword.other.powershell
        3: variable.parameter.powershell

  attribute:
    - match: (\[)\s*\b(?i)(cmdletbinding|alias|outputtype|parameter|validatenotnull|validatenotnullorempty|validatecount|validateset|allownull|allowemptycollection|allowemptystring|validatescript|validaterange|validatepattern|validatelength)\b
      captures:
        1: punctuation.section.bracket.begin.powershell
        2: support.function.attribute.powershell
      push:
        - meta_scope: meta.attribute.powershell
        - match: \]
          scope: punctuation.section.bracket.end.powershell
          pop: true
        - match: \(
          scope: punctuation.section.group.begin.powershell
          push:
            - match: \)
              scope: punctuation.section.group.end.powershell
              pop: true
            - include: variable
            - include: variable-no-property
            - include: hashtable
            - include: script-block
            - include: double-quoted-string-escapes
            - include: double-quoted-string
            - include: type
            - include: numeric-constant
            - include: main
            - match: (?i)\b(mandatory|valuefrompipeline|valuefrompipelinebypropertyname|valuefromremainingarguments|position|parametersetname|defaultparametersetname|supportsshouldprocess|positionalbinding|helpuri|confirmimpact|helpmessage)\b(?:\s+)?(=)
              captures:
                1: variable.parameter.attribute.powershell
                2: keyword.operator.assignment.powershell
            - match: \'
              scope: punctuation.definition.string.begin.powershell
              push:
                - meta_scope: string.quoted.single.powershell
                - match: \'\'
                  scope: constant.character.escape.powershell
                - match: \'
                  scope: punctuation.definition.string.end.powershell
                  pop: true

  commands:
    - match: (?:[\w\\:-]*\\)?\b(?i:Add|Approve|Assert|Backup|Block|Build|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Deploy|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write)\-.+?(?:\.(?i:exe|cmd|bat|ps1))?\b
      # "Verb-Noun pattern:"
      scope: support.function.powershell
    - match: \b(?i:(?:foreach|where|sort|tee)-object)\b
      # Builtin cmdlets with reserved verbs
      scope: support.function.powershell

  comment-block:
    - match: <#
      scope: punctuation.definition.comment.block.begin.powershell
      push:
        - meta_scope: comment.block.powershell
        - match: '#>'
          scope: punctuation.definition.comment.block.end.powershell
          pop: true
        - include: comment-embedded-docs

  comment-embedded-docs:
    - match: ^\s*(\.)(?i:(COMPONENT|DESCRIPTION|EXAMPLE|EXTERNALHELP|FORWARDHELPCATEGORY|FORWARDHELPTARGETNAME|FUNCTIONALITY|INPUTS|LINK|NOTES|OUTPUTS|REMOTEHELPRUNSPACE|ROLE|SYNOPSIS))
      scope: comment.documentation.embedded.powershell
      captures:
        1: punctuation.definition.keyword.documentation.powershell
        2: keyword.other.documentation.powershell
    - match: ^\s*(\.)(?i:(PARAMETER)\s+([a-z0-9-_]+))
      scope: comment.documentation.embedded.powershell
      captures:
        1: punctuation.definition.keyword.documentation.powershell
        2: keyword.other.documentation.param.powershell
        3: variable.parameter.powershell
    - match: ^\s*(\.)(?i:(FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP)\s+([a-z0-9-_]+))
      scope: comment.documentation.embedded.powershell
      captures:
        1: punctuation.definition.keyword.documentation.powershell
        2: keyword.other.documentation.powershell
        3: markup.underline.link.powershell

  comment-line:
    - match: (?<![`\\-])#
      captures:
        0: punctuation.definition.comment.powershell
      push:
        - meta_scope: comment.line.powershell
        - match: $
          captures:
            0: punctuation.definition.comment.powershell
          pop: true
        - include: comment-embedded-docs
        - include: requires-directive

  strings:
    - include: double-quoted-string
    - include: single-quoted-string
    - match: \@"(?=$)
      scope: punctuation.definition.string.begin.powershell
      push:
        - meta_scope: string.quoted.double.heredoc.powershell
        - match: ^"@
          scope: punctuation.definition.string.end.powershell
          pop: true
        - include: variable-no-property
        - include: double-quoted-string-escapes
        - include: interpolation
    - match: \@'(?=$)
      scope: punctuation.definition.string.begin.powershell
      push:
        - meta_scope: string.quoted.single.heredoc.powershell
        - match: ^'@
          scope: punctuation.definition.string.end.powershell
          pop: true
        - match: "''"
          scope: constant.character.escape.powershell

  single-quoted-string:
    - match: \'
      scope: punctuation.definition.string.begin.powershell
      push:
        - meta_scope: string.quoted.single.powershell
        - match: "''"
          scope: constant.character.escape.powershell
        - match: \'
          scope: punctuation.definition.string.end.powershell
          pop: true

  double-quoted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.powershell
      push:
        - meta_scope: string.quoted.double.powershell
        - include: double-quoted-string-escapes
        - match: '"'
          scope: punctuation.definition.string.end.powershell
          pop: true
        - match: '(?i)\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,64}\b'
        - include: variable-no-property
        - include: variable
        - include: interpolation
        - match: '`\s*$'
          scope: keyword.other.powershell

  double-quoted-string-escapes:
    - match: '`[0abnfrvt"''$`]'
      scope: constant.character.escape.powershell
    - match: '""'
      scope: constant.character.escape.powershell

  function:
    - match: ^(?:\s*+)(?i)(function|filter|configuration|workflow)\s+(?:(global|local|script|private):)?((?:\p{L}|\d|_|-|\.)+)
      scope: meta.function.powershell
      captures:
        1: storage.type.powershell
        2: storage.modifier.scope.powershell
        3: entity.name.function.powershell
      push:
        - match: (?=\{|\()
          pop: true
        - include: comment-line

  hashtable:
    - match: (@)(\{)
      captures:
        1: keyword.other.hashtable.begin.powershell
        2: punctuation.section.braces.begin.powershell
      push:
        - meta_scope: meta.hashtable.powershell
        - match: \}
          scope: punctuation.section.braces.end.powershell
          pop: true
        - match: \b(['"]?)(\w+)(['"]?)\s*(=)\s*
          scope: meta.hashtable.assignment.powershell
          captures:
            1: punctuation.definition.string.begin.powershell
            2: variable.other.readwrite.powershell
            3: punctuation.definition.string.end.powershell
            4: keyword.operator.assignment.powershell
        - include: script-block
        - include: main

  interpolated-string-content:
    - match: \(
      scope: punctuation.section.group.begin.powershell
      push:
        - meta_content_scope: interpolated.simple.source.powershell
        - match: \)
          scope: punctuation.section.group.end.powershell
          pop: true
        - include: main
        - include: interpolation
        - include: interpolated-string-content

  interpolation:
    - match: (\$)(\()
      captures:
        1: punctuation.definition.variable.powershell
        2: punctuation.section.group.begin.powershell
      push:
        - meta_content_scope: interpolated.complex.source.powershell
        - match: \)
          scope: punctuation.section.group.end.powershell
          pop: true
        - include: main
        - include: interpolation
        - include: interpolated-string-content

  numeric-constant:
    - match: \b((0[xX])[\h_]*\h({{integer_suffix}})?)({{bytes_unit}})?\b
      captures:
        1: constant.numeric.integer.hexadecimal.powershell
        2: punctuation.definition.numeric.base.powershell
        3: storage.type.numeric.powershell
        4: keyword.other.unit.powershell
    - match: \b((0[bB])[01_]*[01]({{integer_suffix}})?)({{bytes_unit}})?\b
      captures:
        1: constant.numeric.integer.binary.powershell
        2: punctuation.definition.numeric.base.powershell
        3: storage.type.numeric.powershell
        4: keyword.other.unit.powershell
    - match: |-
        (?x:
          (
            \b{{dec_digits}}
            (?:
              (?:
                (?:(\.(?!\.))\d*){{dec_exponent}}?  # No `_` after the `.`
                |{{dec_exponent}}
              )
              ({{float_suffix}})?
              |({{float_suffix}})
            )
            |(\.)\d+
          )
          ({{bytes_unit}})?
        )\b
      captures:
        1: constant.numeric.float.decimal.powershell
        2: punctuation.separator.decimal.powershell
        3: storage.type.numeric.powershell
        4: storage.type.numeric.powershell
        5: punctuation.separator.decimal.powershell
        6: keyword.other.unit.powershell
    - match: \b((?:0|[1-9]{{dec_digits}}?)({{integer_suffix}})?)({{bytes_unit}})?\b
      captures:
        1: constant.numeric.integer.decimal.powershell
        2: storage.type.numeric.powershell
        3: keyword.other.unit.powershell

  script-block:
    - match: \{
      scope: punctuation.section.braces.begin.powershell
      push:
        - meta_scope: meta.scriptblock.powershell
        - match: \}
          scope: punctuation.section.braces.end.powershell
          pop: true
        - include: main

  type:
    - match: \[
      scope: punctuation.section.bracket.begin.powershell
      push:
        - match: \]
          scope: punctuation.section.bracket.end.powershell
          pop: true
        - match: (?!\d+|\.)[\p{L}\p{N}.]+
          scope: storage.type.powershell
        - include: main

  variable:
    - match: (\$)(?i:False|Null|True)\b
      scope: constant.language.powershell
      captures:
        1: punctuation.definition.variable.powershell
    - match: ((\$)(?i:Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID))((?:\.\w+)*\b)?\b
      captures:
        1: support.constant.variable.powershell
        2: punctuation.definition.variable.powershell
        3: variable.other.member.powershell
    - match: |-
        (?x:
          (
            (\$)
            (?:
              [$^?_]
              |(?i:Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach
                |Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile
                |PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem
                |PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs
                |SourceEventArgs|StackTrace|Switch|This
              )\b
            )
          )
          ((?:\.\w+)*\b)?
        )
      captures:
        1: variable.language.powershell
        2: punctuation.definition.variable.powershell
        3: variable.other.member.powershell
    - match: ((\$)(?i:ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference))((?:\.\w+)*\b)?\b
      comment: Style preference variables as language variables so that they stand out.
      captures:
        1: variable.language.powershell
        2: punctuation.definition.variable.powershell
        3: variable.other.member.powershell
    - match: ((\$|@)(?i:(global|local|private|script|using|workflow):\w+))((?:\.\w+)*\b)?
      captures:
        1: variable.other.readwrite.powershell
        2: punctuation.definition.variable.powershell
        3: storage.modifier.scope.powershell
        4: variable.other.member.powershell
    - match: ((\$)(\{)((?i:global|local|private|script|using|workflow)):([^}]*[^}`])(\}))((?:\.\w+)*\b)?
      captures:
        1: variable.other.readwrite.powershell
        2: punctuation.definition.variable.powershell
        3: punctuation.section.braces.begin.powershell
        4: storage.modifier.scope.powershell
        6: punctuation.section.braces.end.powershell
        7: variable.other.member.powershell
    - match: ((?i:(\$|@)(\w+:)?\w+))((?:\.\w+)*\b)?
      captures:
        1: variable.other.readwrite.powershell
        2: punctuation.definition.variable.powershell
        3: support.variable.drive.powershell
        4: variable.other.member.powershell
    - match: ((?i:(\$)(\{)(\w+:)?([^}]*[^}`])(\})))((?:\.\w+)*\b)?
      captures:
        1: variable.other.readwrite.powershell
        2: punctuation.definition.variable.powershell
        3: punctuation.section.braces.begin.powershell
        4: support.variable.drive.powershell
        6: punctuation.section.braces.end.powershell
        7: variable.other.member.powershell

  variable-no-property:
    - match: (\$)(?i:False|Null|True)\b
      scope: constant.language.powershell
      captures:
        1: punctuation.definition.variable.powershell
    - match: (\$)(?i:Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID)\b
      scope: support.constant.variable.powershell
      captures:
        1: punctuation.definition.variable.powershell
    - match: |-
        (?x:
          (\$)
          (?:
            [$^?_]
            |(?i:Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach
              |Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile
              |PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem
              |PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs
              |SourceEventArgs|StackTrace|Switch|This)\b
          )
        )
      scope: variable.language.powershell
      captures:
        1: punctuation.definition.variable.powershell
    - match: (\$)(?i:ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference)\b
      scope: variable.language.powershell
      captures:
        1: punctuation.definition.variable.powershell
    - match: (?i:(\$|@)(global|local|private|script|using|workflow):(\w+))
      captures:
        1: punctuation.definition.variable.powershell
        2: storage.modifier.scope.powershell
        3: variable.other.readwrite.powershell
        4: entity.name.function.invocation.powershell
    - match: (?i:(\$)(\{)(global|local|private|script|using|workflow):([^}]*[^}`])(\}))
      captures:
        1: punctuation.definition.variable.powershell
        2: storage.modifier.scope.powershell
        3: variable.other.readwrite.powershell
        4: keyword.other.powershell
        5: entity.name.function.invocation.powershell
    - match: (?i:(\$)(\w+:)?\w+)
      scope: variable.other.readwrite.powershell
      captures:
        1: punctuation.definition.variable.powershell
        2: support.variable.drive.powershell
    - match: (?i:(\$)(\{)(\w+:)?([^}]*[^}`])(\}))
      captures:
        1: punctuation.definition.variable.powershell
        2: punctuation.section.braces.begin
        3: support.variable.drive.powershell
        4: variable.other.readwrite.powershell
        5: punctuation.section.braces.end
